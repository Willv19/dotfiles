* My Emacs Config
  "Emacs is a great operating system, lacking only a decent editor"
** General behavior
*** General emacs variables
    These are general emacs config variables that change the default behavior
    #+BEGIN_SRC emacs-lisp
      (setq delete-old-versions -1 )          ; delete excess backup versions silently
      (setq version-control t )               ; use version control
      (setq vc-make-backup-files t )          ; make backups file even when in version controlled dir
      (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
      (setq vc-follow-symlinks t )                                   ; don't ask for confirmation when opening symlinked file
      (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
      (setq inhibit-startup-screen t )        ; inhibit useless and old-school startup screen
      (setq ring-bell-function 'ignore )      ; silent bell when you make a mistake
      (setq coding-system-for-read 'utf-8 )   ; use utf-8 by default
      (setq coding-system-for-write 'utf-8 )
      (setq sentence-end-double-space nil)    ; sentence SHOULD end with only a point.
      (setq initial-scratch-message "Welcome in Emacs") ; print a default message in the empty scratch buffer opened at startup
    #+END_SRC
*** Relative line numbers
    Useful for evil-mode
    #+BEGIN_SRC emacs-lisp
      (global-display-line-numbers-mode)
      (customize-set-variable 'display-line-numbers-type 'relative)
    #+END_SRC
*** Bootstrap use-package
    #+BEGIN_SRC emacs-lisp
      (require 'package)

      (setq package-enable-at-startup nil) ; tells emacs not to load any packages before starting up
      ;; the following lines tell emacs where on the internet to look up
      ;; for new packages.
      (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
			       ("gnu"       . "http://elpa.gnu.org/packages/")
			       ("melpa"     . "https://melpa.org/packages/")))
      (package-initialize) ; guess what this one does ?

(unless (package-installed-p 'use-package) ; unless it is already installed
  (package-refresh-contents) ; updage packages archive
  (package-install 'use-package)) ; and install the most recent version of use-package
(require 'use-package) ; guess what this one does too ?

    #+END_SRC
** General packages
*** Diminish
    Useful for hiding unwanted minor modes from the mode line.
    #+BEGIN_SRC emacs-lisp
      (use-package diminish :ensure t
	:config
	(diminish 'eldoc-mode))
    #+END_SRC
*** Evil
    Vim emulation for emacs.
    #+BEGIN_SRC emacs-lisp
      (use-package evil :ensure t
	:config (evil-mode)
	(diminish 'undo-tree-mode))
    #+END_SRC
*** Evil-numbers
    Increase and decrease numbers at a point in normal mode.
    #+BEGIN_SRC emacs-lisp
      (use-package evil-numbers :ensure t :defer t
	:init
	(define-key evil-normal-state-map (kbd "[+") 'evil-numbers/inc-at-pt)
	(define-key evil-normal-state-map (kbd "[-") 'evil-numbers/dec-at-pt))
    #+END_SRC
*** Evil-nerd-commenter
    An evil operator for commenting out code
    #+BEGIN_SRC emacs-lisp
      (use-package evil-nerd-commenter :ensure t :defer t
	:commands (evilnc-comment-operator))
    #+END_SRC
*** Ivy
    A lightweight completion framework
    #+BEGIN_SRC emacs-lisp
      (use-package ivy :ensure t :defer t
	:bind (:map ivy-minibuffer-map        ; bind in the ivy buffer
		    ("RET" . ivy-alt-done)
		    ("C-0"   . ivy-beginning-of-buffer)
		    ("C-e"   . ivy-end-of-buffer)
		    ("C-k"   . ivy-previous-line)
		    ("C-j"   . ivy-next-line)))
    #+END_SRC
*** Counsel
    Plugins for Ivy for common features (buffers, files, M-x, etc.)
    #+BEGIN_SRC emacs-lisp
      (use-package counsel :ensure t :defer t)
    #+END_SRC
*** Company
    Code completion suggestions.
    #+BEGIN_SRC emacs-lisp
      (use-package company :ensure t
	:diminish company-mode
	:bind (:map company-active-map
		    ("C-k" . company-select-previous)
		    ("C-j" . company-select-next))
	:init 
	(add-hook 'after-init-hook 'global-company-mode)
	:config
	(setq company-idle-delay 0
	      company-minimum-prefix-length 1
	      company-require-match nil)
	(setq company-backends (delete 'company-dabbrev company-backends)))
    #+END_SRC
*** Projectile
    Project support for emacs.
    #+BEGIN_SRC emacs-lisp
      (use-package projectile :ensure t :defer t)
    #+END_SRC
*** Counsel-projectile
    Counsel plugins for projectile (find file in project, search in project, etc.)
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-projectile :ensure t
	:config
	(counsel-projectile-mode))
    #+END_SRC
*** Smartparens
    Intelligently match parentheses in ~prog-mode~.
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens :ensure t :defer t
	:diminish smartparens-mode
	:init
	(add-hook 'prog-mode-hook 'smartparens-mode)
	:config
	(require 'smartparens-config))
    #+END_SRC
*** Rainbow-delimeters
    Color matching delimiters in the same color. Useful for visually parsing nested SEXPs.
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
	:ensure t
	:defer t
	:init
	(add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
    #+END_SRC
*** Which-key
    "Displays the key bindings following your currently entered incomplete command (a prefix) in a popup."
    #+BEGIN_SRC emacs-lisp
      (use-package which-key :ensure t
	:diminish which-key-mode
	:config
	(which-key-mode)
	(which-key-setup-side-window-bottom)
	(setq which-key-sort-order 'which-key-prefix-then-key-order ;; simple then alphabetic order.
	      which-key-popup-type 'side-window
	      which-key-side-window-max-height 0.3
	      which-key-side-window-max-width 0.5
	      which-key-idle-delay 0.3
	      which-key-min-display-lines 7))
    #+END_SRC
*** General
    Simpler prefix keybindings.
    #+BEGIN_SRC emacs-lisp
      (use-package general :ensure t)
    #+END_SRC
*** Flycheck
    Syntax-checking framework.
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck :ensure t :defer t
	:init
	(add-hook 'prog-mode-hook 'flycheck-mode)
	:config
	(customize-set-variable 'flycheck-disabled-checkers '(emacs-lisp-checkdoc emacs-lisp)))
    #+END_SRC
*** Flycheck-inline
    Display flycheck errors inline.
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-inline :ensure t :defer t
	:init
	(with-eval-after-load 'flycheck
	  (add-hook 'flycheck-mode-hook #'flycheck-inline-mode)))
    #+END_SRC
*** Magit
    Manage git repositories inside emacs.
    #+BEGIN_SRC emacs-lisp
      (use-package magit :ensure t :defer t)
    #+END_SRC
*** Evil-magit
    Vim keybindings for magit.
    #+BEGIN_SRC emacs-lisp
      (use-package evil-magit :ensure t)
    #+END_SRC
*** Move-text
    Simple emacs lisp functions for moving text.
    #+BEGIN_SRC emacs-lisp
      (use-package move-text :ensure t :defer t)
    #+END_SRC
*** Hydra
    "This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra."
    #+BEGIN_SRC emacs-lisp
      (use-package hydra :ensure t)
    #+END_SRC
** Utility functions
*** Switch-to-other-buffer
    Switch to the other buffer relative to the current buffer.
    #+BEGIN_SRC emacs-lisp
      (defun switch-to-other-buffer ()
	"Switch to the other buffer relative to the current buffer."
	(interactive)
	(switch-to-buffer (other-buffer (current-buffer) t)))
    #+END_SRC
*** Toggle-relative-line-numbers
    Toggle between relative and absolute line numbers.
    #+BEGIN_SRC emacs-lisp
      (defun toggle-relative-line-numbers ()
	"Toggle between relative and absolute line numbers."
	(interactive)
	(if (eq display-line-numbers 'relative)
	    (progn (setq display-line-numbers t)
		   (message "Absolute line numbers."))
	  (progn (setq display-line-numbers 'relative)
		 (message "Relative line numbers."))))
    #+END_SRC
*** Open-init-el
    #+BEGIN_SRC emacs-lisp
      (defun open-init-el ()
	"Open init.el."
	(interactive)
	(find-file "~/.emacs.d/init.el"))
    #+END_SRC
*** Open-config-org
    #+BEGIN_SRC emacs-lisp
      (defun open-config-org ()
	"Open init.el."
	(interactive)
	(find-file "~/.emacs.d/config.org"))
    #+END_SRC
*** Iwb
    Indent whole buffer.
    #+BEGIN_SRC emacs-lisp
      (defun iwb ()
	"Indent whole buffer."
	(interactive)
	(delete-trailing-whitespace)
	(indent-region (point-min) (point-max) nil)
	(untabify (point-min) (point-max))
	(message "Indented whole buffer."))
    #+END_SRC
*** Reload-config-org
    #+BEGIN_SRC emacs-lisp
      (defun reload-config-org ()
	"Reload config.org."
	(interactive)
	(let* ((config-file "~/.emacs.d/config.org")
	       (output-file "~/.emacs.d/config.el")
	       (buffer (find-buffer-visiting config-file)))
	  (when buffer (save-excursion (set-buffer buffer) (save-buffer)))
	  (init-tangle-config-org config-file output-file)
	  (load-file output-file)
	  (message "Reloaded config.org.")))
    #+END_SRC
**** TODO Turn this into a generic command that works over =config-files=
*** Evil-insert-space-above
    Insert PREFIX spaces above current line.
    #+BEGIN_SRC emacs-lisp
      (defun evil-insert-space-above (count)
	"Insert COUNT spaces above current line."
	(interactive "p")
	(save-excursion (end-of-line 0) (newline count)))
    #+END_SRC
*** Evil-insert-space-below
    Insert PREFIX spaces below current line.
    #+BEGIN_SRC emacs-lisp
      (defun evil-insert-space-below (count)
	"Insert COUNT spaces below current line."
	(interactive "p")
	(save-excursion (end-of-line) (newline count)))
    #+END_SRC
** Keybindings
*** Make escape abort key
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
    #+END_SRC
*** General keybindings
    #+BEGIN_SRC emacs-lisp
      (general-define-key "H-g" 'magit-status
			  "M-x" 'counsel-M-x
			  "H-e" 'eval-last-sexp
			  "H-;" 'evilnc-comment-operator
			  "H-=" 'iwb
			  [(hyper tab)] 'switch-to-other-buffer
			  "H-/" 'counsel-ag

			  ;; Buffers
			  "H-b d" 'evil-delete-buffer
			  "H-b b" 'ivy-switch-buffer

			  ;; Files
			  "H-f f" 'counsel-find-file
			  "H-f C" 'open-init-el
			  "H-f c" 'open-config-org
			  "H-f r" 'reload-config-org

			  ;; Projects
			  "H-p f" '(counsel-projectile-find-file :which-key "find file")
			  "H-p /" '(counsel-projectile-ag :which-key "ag")
			  "H-p p" '(counsel-projectile-switch-project :which-key "switch project")

			  ;; Toggles
			  "H-t n" '(toggle-relative-line-numbers :which-key "line number format")
			  "H-t w" 'whitespace-mode

			  ;; Quit
			  "H-q" 'save-buffers-kill-terminal
			  "H-Q" 'save-buffers-kill-emacs
			  )
    #+END_SRC
*** Window management
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-window-management ()
	("/" evil-window-vsplit "vsplit")
	("-" evil-window-split "split")
	("d" evil-window-delete "delete")
	("j" evil-window-down "down")
	("k" evil-window-up "up")
	("h" evil-window-left "left")
	("l" evil-window-right "right")
	("f" counsel-find-file "file" :color blue)
	("p" counsel-projectile-find-file "project file" :color blue)
	("D" delete-other-windows "delete other windows" :color blue)
	("ESC" nil "quit" :color blue))

      (general-define-key "H-w" 'hydra-window-management/body)
    #+END_SRC
*** Extra evil operators
    #+BEGIN_SRC emacs-lisp
      (general-define-key
       :states '(normal)
       "[ SPC" 'evil-insert-space-above
       "] SPC" 'evil-insert-space-below
       "[e" 'move-text-up
       "]e" 'move-text-down)
    #+END_SRC
*** Local prefix
    #+BEGIN_SRC emacs-lisp
      (general-create-definer local-leader-def
	:prefix "H-,")

      (local-leader-def
	:states '(normal visual insert emacs)
	:keymaps 'override

	;; Flycheck
	"f" '(:ignore t :which-key "Flycheck")
	"fn" '(flycheck-next-error :which-key "next error")
	"fp" '(flycheck-previous-error :which-key "previous error")
	"fl" '(flycheck-list-errors :which-key "list errors")
	)
    #+END_SRC
** Appearance
*** Dracula theme
    #+BEGIN_SRC emacs-lisp
      (use-package dracula-theme :ensure t)
    #+END_SRC
*** Set the font
    #+BEGIN_SRC emacs-lisp
      (set-frame-font "Iosevka-12" nil t)
    #+END_SRC
*** Hide the window decorations in GUI mode
    #+BEGIN_SRC emacs-lisp
      (and (functionp 'scroll-bar-mode) (scroll-bar-mode -1))
      (and (functionp 'menu-bar-mode) (menu-bar-mode -1))
      (and (functionp 'tool-bar-mode) (tool-bar-mode -1))
    #+END_SRC
*** Add information to the mode line
    #+BEGIN_SRC emacs-lisp
      (line-number-mode t)
      (column-number-mode t)
      (size-indication-mode t)
    #+END_SRC
** Language-specific configuration
*** DISABLED LaTeX
    #+BEGIN_SRC emacs-lisp
      (use-package tex
	:ensure auctex
	:mode ("\\.tex\\'" . LaTeX-mode)
	:config
	(setq TeX-auto-save t)
	(setq TeX-parse-self t)
	(setq-default TeX-master nil)
	(setq LaTeX-indent-level 4)
	(add-hook 'LaTeX-mode-hook 'visual-line-mode)
	(add-hook 'LaTeX-mode-hook 'flyspell-mode)
	(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
	(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
	)

      (use-package preview :ensure auctex
	:init
	(use-package font-latex :ensure auctex)
	:config
	(set-default 'preview-scale-function 1.7)
	(set-default 'preview-default-option-list
		     '("displaymath" "floats" "textmath")))
    #+END_SRC
*** Rust
**** Rust-mode
     #+BEGIN_SRC emacs-lisp
       (use-package rust-mode
	 :defer t
	 :ensure t
	 :init
	 (local-leader-def
	   :states '(normal visual insert emacs)
	   :keymaps 'rust-mode-map
	   "=" 'rust-format-buffer))
     #+END_SRC
**** Toml-mode
     #+BEGIN_SRC emacs-lisp
       (use-package toml-mode
	 :ensure t
	 :defer t
	 :mode "/\\(Cargo.lock\\|\\.cargo/config\\)\\'")
     #+END_SRC
**** Racer
     #+BEGIN_SRC emacs-lisp
       (use-package racer
	 :defer t
	 :ensure t
	 :init
	 (add-hook 'rust-mode-hook 'racer-mode)
	 (local-leader-def
	   :states '(normal visual insert emacs)
	   :keymaps 'rust-mode-map
	   "h" 'racer-describe))
     #+END_SRC
**** Cargo
     #+BEGIN_SRC emacs-lisp
       (use-package cargo
	 :defer t
	 :ensure t
	 :init
	 (add-hook 'rust-mode-hook 'cargo-minor-mode)
	 (local-leader-def
	   :states '(normal visual insert emacs)
	   :keymaps 'rust-mode-map
	   "c" '(:ignore t :which-key "Cargo")
	   "cb" '(cargo-process-build :which-key "build")
	   "cr" '(cargo-process-run :which-key "run")
	   "ct" '(cargo-process-test :which-key "test")
	   "cC" '(cargo-process-clean :which-key "clean")
	   "cc" '(cargo-process-clippy :which-key "clippy")))
     #+END_SRC
**** Flycheck-rust
     #+BEGIN_SRC emacs-lisp
       (use-package flycheck-rust
	 :defer t
	 :ensure t
	 :init
	 (with-eval-after-load 'rust-mode
	   (add-hook 'rust-mode-hook #'flycheck-rust-setup)))
     #+END_SRC
*** Org
**** Org-mode
     #+BEGIN_SRC emacs-lisp
       (use-package org
	 :defer t
	 :ensure t)
     #+END_SRC
**** Evil-org
     #+BEGIN_SRC emacs-lisp
       (use-package evil-org
	 :ensure t
	 :after org
	 :config
	 (add-hook 'org-mode-hook 'evil-org-mode))
     #+END_SRC
**** Org-bullets
     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
	 :defer t
	 :ensure t
	 :init
	 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
     #+END_SRC
